@startuml
namespace HelloImGui {

class _ <free functions>{
    + void Run(RunnerParams &)
    + void Run(VoidFunction gui, windowSize, title)
}

_ --> RunnerParams: uses

enum BackendType <enum>{
    FirstAvailable,
    Sdl,
    Glfw,
    Qt
}

class RunnerParams <struct> {
    RunnerCallbacks callbacks;
    AppWindowParams appWindowParams;
    ImGuiWindowParams imGuiWindowParams;
    DockingParams dockingParams;
    BackendPointers backendPointers;
    BackendType backendType = FirstAvailable;
    bool appShallExit = false;
}

class RunnerCallbacks <struct> {
    ---
    VoidFunction ShowGui = {};
    VoidFunction ShowMenus = {};
    VoidFunction ShowStatus = {};
    VoidFunction PostInit = {};
    VoidFunction BeforeExit = {};

    //Handle any backend event (e.g.SDL_Event)
    AnyBackendEventCallback = {};

    VoidFunction LoadAdditionalFonts =
       LoadDefaultFont_WithFontAwesomeIcons;

    VoidFunction SetupImGuiConfig = 
      SetupDefaultImGuiConfig;

    VoidFunction SetupImGuiStyle = 
      SetupDefaultImGuiStyle;

    mobileCallbacks;
}

class MobileCallbacks <struct>{
    ---
    Only available on mobile devices
    ---
    VoidFunction OnDestroy = {};
    VoidFunction OnLowMemory = {};
    VoidFunction OnPause = {};
    VoidFunction OnResume = {};
}
RunnerCallbacks *-- MobileCallbacks

enum FullScreenMode <enum>{
    NoFullScreen,
    // Full screen with specified resolution
    FullScreen,
    // Full screen with current resolution
    FullScreenDesktopResolution,
    // Fake full screen, maximized window
    // on the selected monitor
    FullMonitorWorkArea
}

enum WindowSizeState <enum>{
    Standard,
    Minimized,
    Maximized
}

class WindowSize <struct>{
    // used if fullScreenMode==NoFullScreen
    // and autoSize==false
    ScreenSize size = ScreenSize{100, 100};

    // If true, adapt the app window size
    // to the widgets present in the window
    bool autoSize = false;

    fullScreenMode = NoFullScreen;
}

WindowSize *-- FullScreenMode

enum WindowPositionMode <enum>{
    OsDefault,
    MonitorCenter,
    FromCoords,
}

class WindowPosition <struct>{
    windowPositionMode;
    // used if windowPositionMode==FromCoords
    position = {0, 0};
}

WindowPosition *-- WindowPositionMode

class WindowGeometry <struct>{
    WindowSize windowSize;
    WindowPosition windowPosition;
    ---
    // used if full screen,
    // or if windowPositionMode==MonitorCenter
    int monitorIdx = 0;
}

WindowGeometry *-- WindowPosition
WindowGeometry *-- WindowSize

class WindowAppearance <struct>{
    bool borderless = false;
    bool resizable = false;
    WindowSizeState windowSizeState = Standard;
}

WindowAppearance *-- WindowSizeState

class AppWindowParams <struct>{
    string windowTitle;
    ---
    WindowGeometry windowGeometry;
    // if true, then save & restore from last run
    bool restorePreviousGeometry;
    ---
    WindowAppearance windowAppearance;
}

AppWindowParams *-- WindowGeometry
AppWindowParams *-- WindowAppearance


class ImGuiWindowParams <struct> {
    defaultImGuiWindowType = ProvideFullScreenWindow;

    ImVec4 backgroundColor;

    bool showMenuBar = false;
    bool showMenu_App = true;
    bool showMenu_View = true;

    bool showStatusBar = false;
    bool showStatus_Fps = true;

    bool configWindowsMoveFromTitleBarOnly = true;
}

class BackendPointers <struct> {
  ---
  Output structure: filled by HelloImGui
  ---
  void* glfwWindow;
  void* sdlWindow;
  void* sdlGlContext;
}

class DockingParams <struct> {
    vector<DockingSplit> dockingSplits;

    vector<DockableWindow> dockableWindows;

    bool resetUserDockLayout = true;
    bool wasDockLayoutApplied = false;
}

class DockableWindow <struct> {
    string label;
    DockSpaceName dockSpaceName;
    VoidFunction GuiFunction = {};
    bool isVisible = true;
    bool canBeClosed = true;
}

class DockingSplit <struct> {
    DockSpaceName initialDock;
    DockSpaceName newDock;
    ImGuiDir_ direction;
    float ratio = 0.25f;
}

RunnerParams *-- BackendType
RunnerParams *-- RunnerCallbacks
RunnerParams *-- AppWindowParams
RunnerParams *-- ImGuiWindowParams
RunnerParams *-- BackendPointers
RunnerParams *-- DockingParams
DockingParams *-- DockableWindow : vector
DockingParams *-- DockingSplit : vector

}
@enduml